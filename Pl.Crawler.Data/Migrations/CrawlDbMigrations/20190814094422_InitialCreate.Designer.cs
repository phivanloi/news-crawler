// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pl.Crawler.Data;

namespace Pl.Crawler.Data.Migrations.CrawlDbMigrations
{
    [DbContext(typeof(CrawlDbContext))]
    [Migration("20190814094422_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pl.Crawler.Core.Entities.CrawlConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoExport");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("ExportApiUrl")
                        .HasMaxLength(2048);

                    b.Property<string>("PageTypeName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<string>("UrlPattern")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<long>("WebsiteId");

                    b.HasKey("Id");

                    b.ToTable("CrawlConfigs");
                });

            modelBuilder.Entity("Pl.Crawler.Core.Entities.ParseField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CrawlConfigId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("FieldName");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("ParseFields");
                });

            modelBuilder.Entity("Pl.Crawler.Core.Entities.ReplateRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<long>("ParseFieldId");

                    b.Property<int>("ParserType");

                    b.Property<string>("ReplaceData");

                    b.Property<string>("SelectKey");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("ReplateRules");
                });

            modelBuilder.Entity("Pl.Crawler.Core.Entities.SelectRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("DefaultData");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsHtml");

                    b.Property<long>("ParseFieldId");

                    b.Property<int>("ParserType");

                    b.Property<string>("SelectKey");

                    b.Property<bool>("SelectMultiple");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.ToTable("SelectRules");
                });

            modelBuilder.Entity("Pl.Crawler.Core.Entities.Sitemap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int>("DownloadRank");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<long>("WebsiteId");

                    b.HasKey("Id");

                    b.ToTable("Sitemaps");
                });

            modelBuilder.Entity("Pl.Crawler.Core.Entities.Website", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<bool>("FindLinkOnlySiteMap");

                    b.Property<string>("Name")
                        .HasMaxLength(512);

                    b.Property<float>("Rank");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("Id");

                    b.HasIndex("Domain");

                    b.ToTable("Websites");
                });
#pragma warning restore 612, 618
        }
    }
}
